// AUTOGENERATED - DO NOT EDIT

package client

import (
	"fmt"

	"github.com/Arman92/go-tdlib/v2/tdlib"
)

// GetLoginURLInfo Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button
// @param chatID Chat identifier of the message with the button
// @param messageID Message identifier of the message with the button
// @param buttonID Button identifier
func (client *Client) GetLoginURLInfo(chatID int64, messageID int64, buttonID int64) (tdlib.LoginURLInfo, error) {
	result, err := client.SendAndCatch(tdlib.UpdateData{
		"@type":      "getLoginUrlInfo",
		"chat_id":    chatID,
		"message_id": messageID,
		"button_id":  buttonID,
	})

	if err != nil {
		return nil, err
	}

	if result.Data["@type"].(string) == "error" {
		return nil, tdlib.RequestError{Code: int(result.Data["code"].(float64)), Message: result.Data["message"].(string)}
	}

	switch tdlib.LoginURLInfoEnum(result.Data["@type"].(string)) {

	default:
		return nil, fmt.Errorf("Invalid type")
	}
}

// GetExternalLinkInfo Returns information about an action to be done when the current user clicks an external link. Don't use this method for links from secret chats if web page preview is disabled in secret chats
// @param link The link
func (client *Client) GetExternalLinkInfo(link string) (tdlib.LoginURLInfo, error) {
	result, err := client.SendAndCatch(tdlib.UpdateData{
		"@type": "getExternalLinkInfo",
		"link":  link,
	})

	if err != nil {
		return nil, err
	}

	if result.Data["@type"].(string) == "error" {
		return nil, tdlib.RequestError{Code: int(result.Data["code"].(float64)), Message: result.Data["message"].(string)}
	}

	switch tdlib.LoginURLInfoEnum(result.Data["@type"].(string)) {

	default:
		return nil, fmt.Errorf("Invalid type")
	}
}
