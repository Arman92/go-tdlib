// AUTOGENERATED - DO NOT EDIT

package client

import (
	"encoding/json"
	"fmt"

	"github.com/Arman92/go-tdlib/tdlib"
)

// CreateCall Creates a new call
// @param userID Identifier of the user to be called
// @param protocol Description of the call protocols supported by the application
// @param isVideo True, if a video call needs to be created
func (client *Client) CreateCall(userID int32, protocol *tdlib.CallProtocol, isVideo bool) (*tdlib.CallID, error) {
	result, err := client.SendAndCatch(tdlib.UpdateData{
		"@type":    "createCall",
		"user_id":  userID,
		"protocol": protocol,
		"is_video": isVideo,
	})

	if err != nil {
		return nil, err
	}

	if result.Data["@type"].(string) == "error" {
		return nil, fmt.Errorf("error! code: %d msg: %s", result.Data["code"], result.Data["message"])
	}

	var callID tdlib.CallID
	err = json.Unmarshal(result.Raw, &callID)
	return &callID, err

}
