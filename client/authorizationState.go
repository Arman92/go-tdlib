// AUTOGENERATED - DO NOT EDIT

package client

import (
	"encoding/json"
	"fmt"

	"github.com/Arman92/go-tdlib/v2/tdlib"
)

// GetAuthorizationState Returns the current authorization state; this is an offline request. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state. Can be called before initialization
func (client *Client) GetAuthorizationState() (tdlib.AuthorizationState, error) {
	result, err := client.SendAndCatch(tdlib.UpdateData{
		"@type": "getAuthorizationState",
	})

	if err != nil {
		return nil, err
	}

	if result.Data["@type"].(string) == "error" {
		return nil, tdlib.RequestError{Code: int(result.Data["code"].(float64)), Message: result.Data["message"].(string)}
	}

	switch tdlib.AuthorizationStateEnum(result.Data["@type"].(string)) {

	case tdlib.AuthorizationStateWaitTdlibParametersType:
		var authorizationState tdlib.AuthorizationStateWaitTdlibParameters
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateWaitEncryptionKeyType:
		var authorizationState tdlib.AuthorizationStateWaitEncryptionKey
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateWaitPhoneNumberType:
		var authorizationState tdlib.AuthorizationStateWaitPhoneNumber
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateWaitCodeType:
		var authorizationState tdlib.AuthorizationStateWaitCode
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateWaitOtherDeviceConfirmationType:
		var authorizationState tdlib.AuthorizationStateWaitOtherDeviceConfirmation
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateWaitRegistrationType:
		var authorizationState tdlib.AuthorizationStateWaitRegistration
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateWaitPasswordType:
		var authorizationState tdlib.AuthorizationStateWaitPassword
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateReadyType:
		var authorizationState tdlib.AuthorizationStateReady
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateLoggingOutType:
		var authorizationState tdlib.AuthorizationStateLoggingOut
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateClosingType:
		var authorizationState tdlib.AuthorizationStateClosing
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	case tdlib.AuthorizationStateClosedType:
		var authorizationState tdlib.AuthorizationStateClosed
		err = json.Unmarshal(result.Raw, &authorizationState)
		return &authorizationState, err

	default:
		return nil, fmt.Errorf("Invalid type")
	}
}
