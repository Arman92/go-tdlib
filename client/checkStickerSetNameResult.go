// AUTOGENERATED - DO NOT EDIT

package client

import (
	"encoding/json"
	"fmt"

	"github.com/Arman92/go-tdlib/v2/tdlib"
)

// CheckStickerSetName Checks whether a name can be used for a new sticker set
// @param name Name to be checked
func (client *Client) CheckStickerSetName(name string) (tdlib.CheckStickerSetNameResult, error) {
	result, err := client.SendAndCatch(tdlib.UpdateData{
		"@type": "checkStickerSetName",
		"name":  name,
	})

	if err != nil {
		return nil, err
	}

	if result.Data["@type"].(string) == "error" {
		return nil, tdlib.RequestError{Code: int(result.Data["code"].(float64)), Message: result.Data["message"].(string)}
	}

	switch tdlib.CheckStickerSetNameResultEnum(result.Data["@type"].(string)) {

	case tdlib.CheckStickerSetNameResultOkType:
		var checkStickerSetNameResult tdlib.CheckStickerSetNameResultOk
		err = json.Unmarshal(result.Raw, &checkStickerSetNameResult)
		return &checkStickerSetNameResult, err

	case tdlib.CheckStickerSetNameResultNameInvalidType:
		var checkStickerSetNameResult tdlib.CheckStickerSetNameResultNameInvalid
		err = json.Unmarshal(result.Raw, &checkStickerSetNameResult)
		return &checkStickerSetNameResult, err

	case tdlib.CheckStickerSetNameResultNameOccupiedType:
		var checkStickerSetNameResult tdlib.CheckStickerSetNameResultNameOccupied
		err = json.Unmarshal(result.Raw, &checkStickerSetNameResult)
		return &checkStickerSetNameResult, err

	default:
		return nil, fmt.Errorf("Invalid type")
	}
}
