// AUTOGENERATED - DO NOT EDIT

package tdlib

import (
	"encoding/json"
)

// ChatInviteLinkInfo Contains information about a chat invite link
type ChatInviteLinkInfo struct {
	tdCommon
	ChatID        int64          `json:"chat_id"`         // Chat identifier of the invite link; 0 if the user has no access to the chat before joining
	AccessibleFor int32          `json:"accessible_for"`  // If non-zero, the amount of time for which read access to the chat will remain available, in seconds
	Type          ChatType       `json:"type"`            // Contains information about the type of the chat
	Title         string         `json:"title"`           // Title of the chat
	Photo         *ChatPhotoInfo `json:"photo"`           // Chat photo; may be null
	MemberCount   int32          `json:"member_count"`    // Number of members in the chat
	MemberUserIDs []int32        `json:"member_user_ids"` // User identifiers of some chat members that may be known to the current user
	IsPublic      bool           `json:"is_public"`       // True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup
}

// MessageType return the string telegram-type of ChatInviteLinkInfo
func (chatInviteLinkInfo *ChatInviteLinkInfo) MessageType() string {
	return "chatInviteLinkInfo"
}

// NewChatInviteLinkInfo creates a new ChatInviteLinkInfo
//
// @param chatID Chat identifier of the invite link; 0 if the user has no access to the chat before joining
// @param accessibleFor If non-zero, the amount of time for which read access to the chat will remain available, in seconds
// @param typeParam Contains information about the type of the chat
// @param title Title of the chat
// @param photo Chat photo; may be null
// @param memberCount Number of members in the chat
// @param memberUserIDs User identifiers of some chat members that may be known to the current user
// @param isPublic True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup
func NewChatInviteLinkInfo(chatID int64, accessibleFor int32, typeParam ChatType, title string, photo *ChatPhotoInfo, memberCount int32, memberUserIDs []int32, isPublic bool) *ChatInviteLinkInfo {
	chatInviteLinkInfoTemp := ChatInviteLinkInfo{
		tdCommon:      tdCommon{Type: "chatInviteLinkInfo"},
		ChatID:        chatID,
		AccessibleFor: accessibleFor,
		Type:          typeParam,
		Title:         title,
		Photo:         photo,
		MemberCount:   memberCount,
		MemberUserIDs: memberUserIDs,
		IsPublic:      isPublic,
	}

	return &chatInviteLinkInfoTemp
}

// UnmarshalJSON unmarshal to json
func (chatInviteLinkInfo *ChatInviteLinkInfo) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}
	tempObj := struct {
		tdCommon
		ChatID        int64          `json:"chat_id"`         // Chat identifier of the invite link; 0 if the user has no access to the chat before joining
		AccessibleFor int32          `json:"accessible_for"`  // If non-zero, the amount of time for which read access to the chat will remain available, in seconds
		Title         string         `json:"title"`           // Title of the chat
		Photo         *ChatPhotoInfo `json:"photo"`           // Chat photo; may be null
		MemberCount   int32          `json:"member_count"`    // Number of members in the chat
		MemberUserIDs []int32        `json:"member_user_ids"` // User identifiers of some chat members that may be known to the current user
		IsPublic      bool           `json:"is_public"`       // True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup
	}{}
	err = json.Unmarshal(b, &tempObj)
	if err != nil {
		return err
	}

	chatInviteLinkInfo.tdCommon = tempObj.tdCommon
	chatInviteLinkInfo.ChatID = tempObj.ChatID
	chatInviteLinkInfo.AccessibleFor = tempObj.AccessibleFor
	chatInviteLinkInfo.Title = tempObj.Title
	chatInviteLinkInfo.Photo = tempObj.Photo
	chatInviteLinkInfo.MemberCount = tempObj.MemberCount
	chatInviteLinkInfo.MemberUserIDs = tempObj.MemberUserIDs
	chatInviteLinkInfo.IsPublic = tempObj.IsPublic

	fieldType, _ := unmarshalChatType(objMap["type"])
	chatInviteLinkInfo.Type = fieldType

	return nil
}
